---
title: "Transform mouse CPM matrix to count matrix"
format: html
---

We are using as example data the mouse data from the Kaessmann lab's 2019 evo-devo paper (doi:10.1038/s41586-019-1338-5).

That data is available as a matrix of CPM values:

```{r}
read.table( "Downloads/Mouse.CPM.txt" ) -> m

m[1:5,1:5]
```

For the purpose of the course, I would like to have a count matrix with unnormalized data.

So, to undo the normalization, I assume that each sample has a few genes with exactly one read, and that I can hence find the CPM values corresponding to these as the minimum non-zero value in each column. Dividing by this value should undo the normalization:

```{r}
apply( m, 2, function(a) a / min(a[a>0]) ) -> m2

m2[ 1:5, 1:5 ]
```

To check that this works, let's first see if all values are now integer, by finding the maximum deviation from an integer

```{r}
max( abs( m2 - round(m2) ) )
```

This is good, so let's convert to actual integers:

```{r}
round( m2 ) -> m2
storage.mode(m2) <- "integer"

m2[ 1:5, 1:5 ]
```

Before writing it out, we fix an annoying issue with the column names, namely that the period is used both as decimal point and as internal field seperator. Let's replace them with underscores in the latter function:

```{r}
suppressPackageStartupMessages( library( tidyverse ) )

colnames(m2) %>% str_replace( "\\.", "_" ) %>% str_replace( "\\.(\\d+)$", "_\\1" ) -> colnames(m2)

m2[1:5,1:5]
```

Ok, let's write this out:

```{r}
m2 %>% 
as_tibble( rownames="gene_id" ) %>% 
write_tsv( gzfile( "Downloads/evodevo_mouse_counts.tsv.gz", "wb" ) )
```

As a final check, let's make sure that there are all small integers present in all columns. We check for the numbers 0 to 10:

```{r}
sapply( 0:10, function(i) colSums( m2==i ) )
```

